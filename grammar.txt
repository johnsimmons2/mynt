program ::= <validProg> [<definition>*] | [<definition>*] <validProg> 
validProg ::= <main> <load> | <load> <main>

statement ::= <mcstatement> | <if> | <mynt_statement>
expression ::= <condition> | <condition> or <condition>

condition ::= <cond> | <cond> and <cond>
cond ::= <id> <op> <number> | <expression>

loadfunc ::= from <resource>

definition ::= <var_definition> | <func_definition> | <load_func>
func_definition ::= <id> <function>
var_definition ::= <type> <id> <var_declaration> | important <type> <id> <var_declaration>
var_declaration ::= = <number> | = <json_block> | from <resource> | <event>
event ::= $<event_name>
event_name ::= deathCount | playerKillCount

function ::= { <statement>* }
load ::= load <function>
main ::= main <function>

number ::= [0-9]+
type ::= score | zombie | pig | chicken | enderman | number
string ::= (~[“] | ” [\b\t\n\f\r”‘])*
resource ::= ([a-zA-Z]:)?((\/|\\)[a-zA-Z0-9\s_@\-^!#$%&+={}\[\]]+)*\.[a-zA-Z0-9]{1,6}



--- END EBNF ---
What we have so far:
- creates AST in parser for statements, expressions, mccommands, mynt commands
- assign variable
    - if it is a loadable type
        - if no resource provided, try to get it from its name
        - if resource provided with "from" keyword, load it from the file
        - if the assignment is to a block, it is json, load it.
    - otherwise it is a literal, so we assign it and add to the ast.
- declare a function
    - can have as many statements as you want
    - can have mcfunctions
    - can have the set up mynt commands
    - can have if statements
        - can have
    - can have a neighbor, to attach to an event or another function
